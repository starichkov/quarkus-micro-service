services:
  postgres:
    image: postgres:17.4-alpine3.21
    container_name: "quarkus-postgres17"
    restart: always
    environment:
      - "POSTGRES_DB=quarkus_db"
      - "POSTGRES_USER=${DB_USERNAME}"
      - "POSTGRES_PASSWORD=${DB_PASSWORD}"
      - "PGDATABASE=quarkus_db"
      - "PGUSER=${DB_USERNAME}"
      - "PGPASSWORD=${DB_PASSWORD}"
# PGUSER - https://stackoverflow.com/a/60194261
    ports:
      - "5432:5432"
    networks:
      - "quarkusnet"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
#      test: ["CMD-SHELL", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
#      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 15s
  valkey:
    image: valkey/valkey:7.2.8-alpine3.21
    container_name: "quarkus-valkey72a"
    ports:
      - "6379:6379"
    networks:
      - "quarkusnet"
  jaeger:
    image: jaegertracing/jaeger:2.4.0
    container_name: "quarkus-jaeger"
    environment:
      - "COLLECTOR_ZIPKIN_HOST_PORT=:9411"
      - "COLLECTOR_OTLP_ENABLED=true"
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "5778:5778"
      - "16686:16686" # Jaeger UI
      - "9411:9411"
    networks:
      - "quarkusnet"
  quarkus-micro-service:
    build: .
    container_name: "quarkus-micro-service"
    environment:
      - "database.host=quarkus-postgres17"
      - "database.username=${DB_USERNAME}"
      - "database.password=${DB_PASSWORD}"
      - "jaeger.host=quarkus-jaeger"
      - "valkey.host=quarkus-valkey72a"
    ports:
      - "8080:8080"
    networks:
      - "quarkusnet"
    depends_on:
      postgres:
        condition: service_healthy
      jaeger:
        condition: service_started
      valkey:
        condition: service_started
    healthcheck:
      test: "wget -O- --tries=1 --no-verbose --quiet http://localhost:8080/q/health | grep UP || exit 1"
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
  prometheus:
    image: prom/prometheus:v2.55.1
    build:
      context: configuration/prometheus
      dockerfile: Dockerfile
    container_name: "quarkus-prometheus"
    ports:
      - "9090:9090"
    networks:
      - "quarkusnet"
    depends_on:
      quarkus-micro-service:
        condition: service_healthy

networks:
  quarkusnet:
    driver: bridge
    name: "quarkusnet"
